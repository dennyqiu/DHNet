@using Angle.Models
@{
    ViewBag.Title = "Index2";
    var values = Enum.GetValues(typeof(HighchartTypeEnum)).Cast<HighchartTypeEnum>();
    var items = from value in values
                select new SelectListItem { Text = value.ToString(), Value = value.ToString(), Selected = value == HighchartTypeEnum.混合型 };
    ViewBag.ddlChartType = items;

}


<h2>
    DataChart封装控件测试
</h2>
@Html.Label("选择日期维度：")

<br />
<div>
    <input type="button" id="btnDay" name="btnDay" value="日" typevalue='0'
           style="width: 100px;" />
    <input type="button" id="btnWeek" name="btnWeek" value="周" typevalue= '1'
           style="width: 100px;" />
    <input type="button" id="btnYear" name="btnYear" value="月" typevalue = 2
           style="width: 100px;" />
    @Html.Hidden("hdDimension", (int)TimeTypeEnum.Day)
</div>
<br />
@Html.Label("请选择报告指标：")
<div id="metricCheckGroup">
    @Html.CheckBox("impressions", false, new { value = "impressions" })
    @Html.Label("Impressions")
    @Html.CheckBox("clicks", false, new { value = "clicks" })
    @Html.Label("Clicks")
    @Html.CheckBox("ctr", false, new { value = "clicks" })
    @Html.Label("CTR")
    @Html.CheckBox("uv", false, new { value = "uv" })
    @Html.Label("UV")
</div>
<br />
@Html.Label("请选择图标：")
@Html.DropDownList("ddlChartType", new List
        <SelectListItem>
            () {
            new SelectListItem() { Text = "混合型", Value=((int)HighchartTypeEnum.混合型).ToString(), Selected=true },
            new SelectListItem() { Text = "饼图型", Value=((int)HighchartTypeEnum.饼图型).ToString() },
            new SelectListItem() { Text = "多柱状图", Value=((int)HighchartTypeEnum.多柱状图).ToString() },
            new SelectListItem() { Text = "多流线图", Value=((int)HighchartTypeEnum.多流线图).ToString() },
            new SelectListItem() { Text = "多横柱图", Value=((int)HighchartTypeEnum.多横柱图).ToString() },
            new SelectListItem() { Text = "层叠图", Value=((int)HighchartTypeEnum.层叠图).ToString() },
            new SelectListItem() { Text = "区域图", Value=((int)HighchartTypeEnum.区域图).ToString() },
            new SelectListItem() { Text = "气泡图", Value=((int)HighchartTypeEnum.气泡图).ToString() },
            new SelectListItem() { Text = "点阵图", Value=((int)HighchartTypeEnum.点阵图).ToString() }
            }, null, new { @onchange = "javascript:chartChangeEvent()" })
<br />
@Html.Label("图形控件：")
<br />
<div id="highChartDiv">
</div>


<script language="javascript" type="text/javascript">
    //$(document).ready(function () {
    //    bindClick();
    //    getChartSource();
    //});

    $(function () {
        bindClick();
        getChartSource();
    });

    var dc, chartTypeArr = ["combine", "pie", "column", "spline", "bar", "stack", "areaspline", "bubble", "scatter"];

    var bindClick = function () {
        $("input:button").bind("click", function () {
            $("#hdDimension").val($(this).attr("typeValue"));
            getChartSource();
        });

        $("#metricCheckGroup").find("input:checkbox").bind("click", function () {
            dc.refresh();
        })
    };

    var getChartSource = function () {
        var type = chartTypeArr[parseInt($("#ddlChartType").val())];
        var dimensionType = ["ReportDayStr", "ReportWeekStr", "ReportMonthStr"];
        var xAxisParamVal = dimensionType[parseInt($("#hdDimension").val())];
        $.ajax({
            url: "/Highchart/GetDataChartSource",
            type: "post",
            data: { filterValue: 1, dimensionType: $("#hdDimension").val() },
            dataType: "json",
            success: function (data) {
                var chartSource = data.chartSource;
                dc = new $.fn.jDataChart({
                    renderTo: $("#highChartDiv"),
                    //需要展示的位置（哪个DOM元素内）
                    chartType: type,
                    //图标类型：bar,line,spline,column,pie,area,areaspline,combine,bubble,scatter
                    title: "订单数据报告",
                    //图标大标题
                    subtitle: "报告详情",
                    //图标小标题
                    xAxisName: xAxisParamVal,
                    //X轴名称
                    xAxisColumn: xAxisParamVal,
                    //维度列-需要将数据集中的那一列当成维度展现（例如时间，网站，频道等）,相当于yAxisColumn中每个Y轴的Key
                    yAxisSetting: [{ key: "Impressions&Clicks&UV", oppositeOption: false }, { key: "CTR", oppositeOption: true }],
                    //Y轴设置，可添加多条Y轴， key-Y轴名称，oppositeOption-true/false（true为right, false为left）
                    yAxisColumn: [{ key: "Impressions", chartType: "column", yIndex: 0 }, { key: "Clicks", chartType: "column", yIndex: 0 }, { key: "UV", chartType: "column", yIndex: 0 }, { key: "CTR", chartType: "spline", yIndex: 1 }],
                    //指标列-需要将数据集中的那几列当成指标来展示（例如Impressiosn,Clicks,UV,CTR等）
                    //key-指标列明，chartType-图形类型，yIndex-每个指标集需要对应的具体Y轴索引
                    dataSource: chartSource,
                    //图标数据源，是一个JSON的LIST对象，常用的一张二维表数据例如List<TModel>
                    click: function (x, y, category) {
                        alert("x值：" + x + " y值：" + y + " category：" + category);
                    }
                });

                dc.create();
                //Y轴设置可以添加多个Y轴，标准格式：[{key: keyVal, oppositeOption:true/false（true为right, false为left） }]
                //                        yAxisSetting: [{ key: "Impressions&Clicks&UV", oppositeOption: false }, { key: "CTR", oppositeOption: true}],

                //指标列添加标准格式为[{key: keyVal, chartType: chartTypeVal, yIndex: yIndexVal }];
                //                        yAxisColumn: [{ key: "Impressions", chartType: "column", yIndex: 0 }, { key: "Clicks", chartType: "column", yIndex: 0 }, { key: "UV", chartType: "column", yIndex: 0 }, { key: "CTR", chartType: "spline", yIndex: 1}],

                //饼图格式
                //                        yAxisSetting: [{ key: "", oppositeOption: false}],
                //                        yAxisColumn: [{ key: "Impressions", chartType: null, yIndex: null }, { key: "Clicks", chartType: null, yIndex: null }, { key: "UV", chartType: null, yIndex: null}],

                //常见多Series设置
                //                        yAxisSetting: [{ key: "Clicks", oppositeOption: false}];
                //                        yAxisColumn: [{ key: "Clicks", chartType: null, yIndex: null}];

                //                        yAxisSetting: [{ key: "", oppositeOption: false}],
                //                        yAxisColumn: [{ key: "Impressions", chartType: null, yIndex: null }, { key: "Clicks", chartType: null, yIndex: null }, { key: "UV", chartType: null, yIndex: null}],
            },
            error: function (XMLHttpRequest, textStatus, errorThrown) {
                alert(errorThrown);
            }
        });
    }

    var chartChangeEvent = function () {

        var dcOption = dc.getChartOptions();
        var type = chartTypeArr[parseInt($("#ddlChartType").val()) - 1];
        setChangeChartOptions(dcOption, type);
        dc.refresh();
    }

    var setChangeChartOptions = function (dcOption, type) {
        switch (type) {
            case "combine":
                {
                    dcOption.chartType = type;
                    dcOption.xAxisName = dcOption.xAxisName;
                    dcOption.yAxisSetting = [{ key: "Impressions&Clicks", oppositeOption: false }, { key: "CTR", oppositeOption: true }];
                    dcOption.yAxisColumn = [{ key: "Impressions", chartType: "column", yIndex: 0 }, { key: "Clicks", chartType: "column", yIndex: 0 }, { key: "CTR", chartType: "spline", yIndex: 1 }];
                }; break;
            case "pie":
                {
                    dcOption.chartType = type;
                    dcOption.xAxisName = "";
                    dcOption.yAxisSetting = [{ key: "", oppositeOption: false }];
                    dcOption.yAxisColumn = [{ key: "Impressions", chartType: null, yIndex: null }];
                }; break;
            case "bubble":
                {
                    dcOption.chartType = type;
                    dcOption.xAxisName = "Impressions";
                    dcOption.yAxisSetting = [{ key: "Clicks", oppositeOption: false }];
                    dcOption.yAxisColumn = [{ key: "Impressions", chartType: null, yIndex: null }, { key: "Clicks", chartType: null, yIndex: null }, { key: "UV", chartType: null, yIndex: null }];
                }; break;
            case "scatter":
                {
                    dcOption.chartType = type;
                    dcOption.xAxisName = "Impressions";
                    dcOption.yAxisSetting = [{ key: "Clicks", oppositeOption: false }];
                    dcOption.yAxisColumn = [{ key: "Impressions", chartType: null, yIndex: null }, { key: "Clicks", chartType: null, yIndex: null }];
                }; break;
            default:
                {
                    dcOption.chartType = type;
                    dcOption.yAxisSetting = [{ key: "Impressions&Clicks&UV", oppositeOption: false }];
                    dcOption.yAxisColumn = [{ key: "Impressions", chartType: null, yIndex: null }, { key: "Clicks", chartType: null, yIndex: null }, { key: "UV", chartType: null, yIndex: null }];
                }; break;
        }
    }

</script>

@section Scripts {
        @*@Scripts.Render("~/bundles/jquery")*@
        @Scripts.Render("~/bundles/highcharts")
    }
